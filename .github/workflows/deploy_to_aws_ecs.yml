name: test-deploy-to-aws-ecs
on:
  push:
    branches: [ ui-improvements-new ]

  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'tags'

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:

        - name: Checkout
          uses: actions/checkout@v3

        - name: Setup AWS ECR Details
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}


        - name: Login to Amazon ECR
          id: login-pf-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2


        - name: Build and push the tagged docker image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            IMAGE_TAG: latest
          run: |
            echo "${{ secrets.ENV_ECS }}" | base64 --decode > .env
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f additional-files/Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


        - name: Download task definition
          run: |
            aws ecs describe-task-definition --task-definition aprintis-app-task-family --query taskDefinition > task-definition.json

        - name: Deploy to Amazon ECS
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: task-definition.json
            service: aprintis-app-service
            cluster: aprintis-cluster
            wait-for-service-stability: true
